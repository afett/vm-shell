#!/usr/bin/perl
# This program is Copyright 2011 Andreas Fett.
# All rights reserved. This program is free software; you may redistribute it
# and/or modify it under the same terms as Perl itself.

use warnings;
use strict;

use Scalar::Util qw(blessed);

package error;

sub new {
	my ($class, $msg, $help) = @_;
	my $self = {
		msg => $msg,
	};
	return bless $self, $class;
}

sub error::throw(@) {
	die (new error @_);
}

package command;

sub new($) {
	my ($class, $label) = @_;
	my $self;
	$self = {
		symbols => {},
		label => $label,
		operators => {
			destroy => sub {
				error::throw "$label: I cannot be destroyed";
			},
			label => sub { return $label; },
			list => sub { return $self->list; }
		},
	};

	return bless $self, $class;
}

sub symbol {
	my ($self, $object) = @_;

	error::throw "symbol " . $object->label . " already exists"
		if (defined $self->{symbols}->{$object->label});

	return $self->{symbols}->{$object->label} = $object;
}

sub label {
	my $self = shift;
	return $self->{label};
}

sub list {
	my $self = shift;
	return keys %{$self->{symbols}};
}

sub lookup {
	my ($self, $symbol, @tail) = @_;
	return $self if (!defined $symbol);

	error::throw "$self->{label} no such symbol: $symbol"
		unless defined $self->{symbols}->{$symbol};

	my $res = eval {
		$self->{symbols}->{$symbol}->lookup(@tail);
	};

	error::throw $self->{label} . '/' . $@ if $@;

	return $res;
}

sub dispatch() {
	my ($self, $action, @args) = @_;

	error::throw "$self->{label}: operator missing"
		unless defined $action;

	error::throw "$self->{label}: unknown operator '$action'"
		unless defined $self->{operators}->{$action};

	return $self->{operators}->{$action}(@args);
}

sub print {
	my $self = shift;
	return ref $self . '/' . $self->label();
}

package factory;
our @ISA = qw(command);

sub class_name {
	my $self = shift;
	return $self->{class};
}

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	$self->{id} = 0;
	$self->{class} = $label;
	$self->{operators}->{create} = sub {
		my $id = $self->generate_id($_[0]);
		$self->symbol($self->class_name()->new($id));
	};
	return $self;
}

sub generate_id {
	my ($self, $id) = @_;

	# if it looks numeric and is greater than our
	# current id value start with the one after that.
	if (defined $id) {
		if ($id =~ /^(0|[1-9]\d+)$/ && $id >= $self->{id}) {
			$self->{id} = $id + 1;
		}
		return $id;
	}

	return $id = $self->{id}++;
}

package endpoint;

sub connect {
	my ($self, $other) = @_;
	error::throw $other->{label} . " is of same type: " . ref $other
		if (ref $self eq ref $other);
}

package nic;
our @ISA = qw(command endpoint);

package vm;
our @ISA = qw(command);

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	$self->symbol(new factory 'nic');
	return $self;
}

package port;
our @ISA = qw(command endpoint);

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	return $self;
}

package switch;
our @ISA = qw(command);

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	$self->symbol(new factory 'port');
	return $self;
}

package wire;
our @ISA = qw(command);

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	$self->{operators}->{connect} = sub {
		my @endpoints = map {
			error::throw "invalid endpoint $_"
				unless defined $self->{symbols}->{$_};

			my $endpoint = $self->{symbols}->{$_};

			error::throw "cannot connect to a ". ref $endpoint
				unless $endpoint->can('connect');

			$endpoint;
		} @_;

		error::throw "need two endpoints, have:".(scalar @endpoints)
			unless @endpoints == 2;

		$endpoints[0]->connect($endpoints[1]);
		$endpoints[1]->connect($endpoints[0]);

		$self->{endpoints} = \@endpoints;
	};
	return $self;
}

package vmsh;
our @ISA = qw(command);

sub new($) {
	my ($class, $label) = @_;
	my $self = $class->SUPER::new($label);
	$self->symbol(new factory 'vm');
	$self->symbol(new factory 'switch');
	$self->symbol(new factory 'wire');
	$self->{operators}->{quit} = sub {
		exit 0;
	};
	return $self;
}

sub resolve {
	my ($self, $path) = @_;
	return $self->lookup(split '/', $path);
}

sub eval {
	my ($self, $cmd) = @_;
	my ($path, @args) = split ' ', $cmd;

	if (exists $self->{operators}->{$path}) {
		return $self->dispatch($path, @args);
	}

	$self->resolve($path)->dispatch(@args);
}

package main;

sub prompt {
	print "ok> ";
}

my $sh = new vmsh 'vmsh';

prompt;
while (<STDIN>) {
	s/^\s+//; s/\s+$//;

	undef $@;

	eval {
		for my $r ($sh->eval($_)) {
			print $r, "\n";
		}
	} if $_;

	if ($@) {
		if (blessed $@ && $@->isa('error')) {
			print STDERR $@->{msg}, "\n";
		} else {
			die "internal error: $@", "\n";
		}
	}

	prompt;
}

1;

